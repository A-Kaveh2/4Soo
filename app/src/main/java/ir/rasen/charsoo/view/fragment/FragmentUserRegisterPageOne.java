package ir.rasen.charsoo.view.fragment;

import android.app.Activity;
import android.app.Fragment;
import android.app.ProgressDialog;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.ImageView;
import android.widget.TextView;

import ir.rasen.charsoo.R;
import ir.rasen.charsoo.controller.helper.Image_M;
import ir.rasen.charsoo.controller.helper.Params;
import ir.rasen.charsoo.controller.helper.Validation;
import ir.rasen.charsoo.view.activity.ActivityUserRegister;
import ir.rasen.charsoo.view.dialog.DialogMessage;
import ir.rasen.charsoo.view.dialog.PopupSelectCameraGallery;
import ir.rasen.charsoo.view.widget_customized.EditTextFont;


public class FragmentUserRegisterPageOne extends Fragment {

    public static final String TAG="FirstPage";

    EditTextFont editTextName;
    ProgressDialog progressDialog;
    EditTextFont editTextUserIdentifier;
    ImageView imageViewUserPicture;
    String filePath,userPictureString;
    String autoGeneratedStringId;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_user_register_page_one,
                container, false);

        progressDialog = new ProgressDialog(getActivity());
        progressDialog.setMessage(getResources().getString(R.string.please_wait));
        autoGeneratedStringId="";

        imageViewUserPicture = (ImageView) view.findViewById(R.id.imageView_user_picture);
        imageViewUserPicture.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new PopupSelectCameraGallery(getActivity()).show();
            }
        });

        if (userPictureString!=null)
            setProfileImage(Image_M.getBitmapFromString(userPictureString));


        editTextUserIdentifier = (EditTextFont) view.findViewById(R.id.editText_identifier);
        editTextName = (EditTextFont) view.findViewById(R.id.editText_name);
        editTextName.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {
                String typedText=editTextName.getText().toString();
                typedText=typedText.replaceAll(" ", "");
                typedText=typedText.toLowerCase();
                if (typedText.matches(Params.USER_USERNAME_VALIDATION) && (typedText.length() > Params.USER_USERNAME_MIN_LENGTH)
                    && (typedText.length() < Params.USER_USERNAME_MAX_LENGTH)
                        && (autoGeneratedStringId.equals(editTextUserIdentifier.getText().toString()))){
                        editTextUserIdentifier.setText(typedText);
                        autoGeneratedStringId=typedText;
                }
                return false;
            }
        });

        editTextUserIdentifier.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    editTextUserIdentifier.setHint("");
                } else {
                    editTextUserIdentifier.setHint(getActivity().getString(R.string.identifier_field_hint));
                }
            }
        });

        editTextName.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    editTextName.setHint("");
                } else {
                    editTextName.setHint(getActivity().getString(R.string.user_name_field_hint));
//                    if (editTextName.getText().toString().equals("")) {
//                        editTextUserIdentifier.setHint(getActivity().getString(R.string.identifier_field_hint));
//                    }
                }
            }
        });

        editTextName.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int actionID, KeyEvent keyEvent) {
                boolean handeled = true;
                if (actionID == EditorInfo.IME_ACTION_NEXT) {
                    if (editTextUserIdentifier.getText().toString().isEmpty()) {
                        editTextUserIdentifier.requestFocus();
                    } else if (userPictureString == null) {
                        InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                        inputMethodManager.hideSoftInputFromWindow(editTextName.getWindowToken(), 0);
                        new DialogMessage(getActivity(), getString(R.string.choose_user_picture)).show();
                    } else {
                        InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                        inputMethodManager.hideSoftInputFromWindow(editTextName.getWindowToken(), 0);
                        ((ActivityUserRegister) getActivity()).onDoneButtonPressed(TAG);
                    }
                }
                return handeled;
            }
        });

        editTextUserIdentifier.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int actionID, KeyEvent keyEvent) {
                boolean handeled = true;
                if (actionID == EditorInfo.IME_ACTION_NEXT) {
                    if (editTextName.getText().toString().isEmpty()) {
                        editTextName.requestFocus();
                    } else if (userPictureString==null) {
                        InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                        inputMethodManager.hideSoftInputFromWindow(editTextUserIdentifier.getWindowToken(), 0);
                        new DialogMessage(getActivity(),getString(R.string.choose_user_picture)).show();
                    } else{
                        InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Activity.INPUT_METHOD_SERVICE);
                        inputMethodManager.hideSoftInputFromWindow(editTextUserIdentifier.getWindowToken(), 0);
                        ((ActivityUserRegister) getActivity()).onDoneButtonPressed(TAG);
                    }
                }
                return handeled;
            }
        });

        return view;
    }



    public void setProfileImage(Bitmap bmp){
        if (bmp!=null)
            imageViewUserPicture.setImageBitmap(bmp);
    }


    private boolean checkInputData(){

        if (!Validation.validateName(getActivity(), editTextName.getText().toString()).isValid()) {
            editTextName.setError(Validation.getErrorMessage());
            return false;
        }
        if (!Validation.validateIdentifier(getActivity(), editTextUserIdentifier.getText().toString()).isValid()) {
            editTextUserIdentifier.setError(Validation.getErrorMessage());
            return false;
        }
        if(userPictureString == null){
            new DialogMessage(getActivity(),getString(R.string.choose_user_picture)).show();
            return false;
        }
        return true;
    }


    public String[] getInputData(){

        if (checkInputData()) {
            String[] s=new String[2];
            s[0] = editTextName.getText().toString();
            s[1] = editTextUserIdentifier.getText().toString();
            return s;
        }
        else
            return null;
    }

    public void setUserImageString(String imageString){
        userPictureString=imageString;
    }
}
